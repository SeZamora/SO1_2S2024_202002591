// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agronomia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgronomiaServiceClient is the client API for AgronomiaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgronomiaServiceClient interface {
	EnviarAlumno(ctx context.Context, in *AlumnoRequest, opts ...grpc.CallOption) (*AlumnoResponse, error)
}

type agronomiaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgronomiaServiceClient(cc grpc.ClientConnInterface) AgronomiaServiceClient {
	return &agronomiaServiceClient{cc}
}

func (c *agronomiaServiceClient) EnviarAlumno(ctx context.Context, in *AlumnoRequest, opts ...grpc.CallOption) (*AlumnoResponse, error) {
	out := new(AlumnoResponse)
	err := c.cc.Invoke(ctx, "/agronomia.AgronomiaService/EnviarAlumno", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgronomiaServiceServer is the server API for AgronomiaService service.
// All implementations must embed UnimplementedAgronomiaServiceServer
// for forward compatibility
type AgronomiaServiceServer interface {
	EnviarAlumno(context.Context, *AlumnoRequest) (*AlumnoResponse, error)
	mustEmbedUnimplementedAgronomiaServiceServer()
}

// UnimplementedAgronomiaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgronomiaServiceServer struct {
}

func (UnimplementedAgronomiaServiceServer) EnviarAlumno(context.Context, *AlumnoRequest) (*AlumnoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarAlumno not implemented")
}
func (UnimplementedAgronomiaServiceServer) mustEmbedUnimplementedAgronomiaServiceServer() {}

// UnsafeAgronomiaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgronomiaServiceServer will
// result in compilation errors.
type UnsafeAgronomiaServiceServer interface {
	mustEmbedUnimplementedAgronomiaServiceServer()
}

func RegisterAgronomiaServiceServer(s grpc.ServiceRegistrar, srv AgronomiaServiceServer) {
	s.RegisterService(&AgronomiaService_ServiceDesc, srv)
}

func _AgronomiaService_EnviarAlumno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlumnoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgronomiaServiceServer).EnviarAlumno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agronomia.AgronomiaService/EnviarAlumno",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgronomiaServiceServer).EnviarAlumno(ctx, req.(*AlumnoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgronomiaService_ServiceDesc is the grpc.ServiceDesc for AgronomiaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgronomiaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agronomia.AgronomiaService",
	HandlerType: (*AgronomiaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarAlumno",
			Handler:    _AgronomiaService_EnviarAlumno_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/agronomia.proto",
}
